.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::MatrixFraction 3pm"
.TH Math::MatrixFraction 3pm "2015-02-27" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::MatrixFraction \- Perl extension to blah blah blah
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&   use strict;
\&   use warnings;
\&   use Math::Fraction;
\&   use Math::MatrixFraction;
\&
\&   my $A = [[  1,  0, \-3,  0,  2, \-8],
\&            [  0,  1,  5,  0, \-1,  4],
\&            [  0,  0,  0,  1,  7, \-9],
\&            [  0,  0,  0,  0,  0,  0]];
\&
\&   # create a Math::MatrixFraction
\&   my $matrixObjA = Math::MatrixFraction\->new($A);
\&
\&   # get the fractional representation of the matrix
\&   # \-> 2d array of Math::Fraction elements
\&   my $fracA = $matrixObjA\->get_matrix_fraction();
\&
\&   # print fractional representation
\&   print "A (fraction):\en";
\&   $matrixObjA\->print_matrix_fraction();
\&
\&   # print matrix using \*(Aqregular numbers\*(Aq
\&   print "A (double):\en";
\&   $matrixObjA\->print_matrix_double();
\&
\&   # compute kernel of matrix A
\&   # returns a 2d array of Math::Fraction elements
\&   my $kernel = $matrixObjA\->compute_kernel();
\&
\&   # create a new Math::MatrixFraction object
\&   my $kernelObj = Math::MatrixFraction\->new_from_fraction($kernel);
\&
\&   # print kernel (fraction)
\&   print "Kernel (fraction):\en";
\&   $kernelObj\->print_matrix_fraction();
\&
\&   # print kernel (fraction)
\&   print "Kernel (double):\en";
\&   $kernelObj\->print_matrix_double();
\&
\&   # do a test if we really got the kernel of matrix A
\&   # A * kernel = 0
\&   my $resMultiObj = $matrixObjA\->multiply($kernel);
\&
\&   print "A x kernel (fraction):\en";
\&   $resMultiObj\->print_matrix_fraction();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Math::MatrixFraction is a module that is mainly used to compute the kernel of a matrix.
Math::MatrixFraction use Math::Fraction for the kernel computation to avoid problems
caused by numerical accuracy.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SS "new"
.IX Subsection "new"
Constructor. Takes a 2\-dimensional array of 'regular nummber' as input parameter.
.PP
.Vb 4
\&   my $A = [[  1,  0, \-3,  0,  2, \-8],
\&         [  0,  1,  5,  0, \-1,  4],
\&         [  0,  0,  0,  1,  7, \-9],
\&         [  0,  0,  0,  0,  0,  0]];
\&
\&   my $matrixObjA = Math::MatrixFraction\->new($A);
.Ve
.SS "new_from_fraction"
.IX Subsection "new_from_fraction"
Constructor. Takes a 2\-dimensional array of 'Math::Fraction' as input parameter.
.PP
.Vb 3
\&   # compute kernel of matrix A
\&   # returns a 2d array of Math::Fraction elements
\&   my $kernel = $matrixObjA\->compute_kernel();
\&
\&   # create a new Math::MatrixFraction object from kernel
\&   # which is a 2d array of Math::Fraction elements
\&   my $kernelObj = Math::MatrixFraction\->new_from_fraction($kernel);
.Ve
.SS "print_matrix_double"
.IX Subsection "print_matrix_double"
Print matrix using doubles for output.
.PP
.Vb 3
\&   # print matrix using \*(Aqregular numbers\*(Aq
\&   print "A (double):\en";
\&   $matrixObjA\->print_matrix_double();
.Ve
.SS "print_matrix_fraction"
.IX Subsection "print_matrix_fraction"
Print matrix using Math::Fraction for output.
.PP
.Vb 3
\&   # print fractional representation
\&   print "A (fraction):\en";
\&   $matrixObjA\->print_matrix_fraction();
.Ve
.SS "multiply"
.IX Subsection "multiply"
Multiplies object with another matrix (2d array) and returns a new Math::MatrixFraction object.
.PP
.Vb 1
\&   my $resMultiObj = $matrixObjA\->multiply($kernel);
\&
\&   print "A x kernel (fraction):\en";
\&   $resMultiObj\->print_matrix_fraction();
.Ve
.SS "get_num_rows"
.IX Subsection "get_num_rows"
Get number of rows of matrix;
.PP
.Vb 1
\&   my $num_rows = $matrixObjA\->get_num_rows();
.Ve
.SS "get_num_cols"
.IX Subsection "get_num_cols"
Get number of columns of matrix;
.PP
.Vb 1
\&   my $num_cols = $matrixObjA\->get_num_cols();
.Ve
.SS "get_matrix_fraction"
.IX Subsection "get_matrix_fraction"
Returns a reference to a 2\-dimensional array containing Math::Fraction elements.
.PP
.Vb 1
\&   my $frac_2d_ref = $matrixObjA\->get_matrix_fraction();
.Ve
.SS "get_matrix_double"
.IX Subsection "get_matrix_double"
Returns a reference to a 2\-dimensional array containing 'regular numbers'.
.PP
.Vb 1
\&   my $double_2d_ref = $matrixObjA\->get_matrix_double();
.Ve
.SS "compute_kernel"
.IX Subsection "compute_kernel"
Computes the kernel of the matrix and returns the kernel as a 2\-dimensional array of Math::Fraction elements.
.PP
.Vb 1
\&   my $kernel = $matrixObjA\->compute_kernel();
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See the following article to get more information about the kernel of a matrix:
http://en.wikipedia.org/wiki/Kernel_%28linear_algebra%29
.PP
The kerrnel was computed by using a gaussian elemination approach.
The gaussian elimination algorithm was implemented based on the following Wikipedia article:
http://en.wikipedia.org/wiki/Gaussian_elimination
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian Jungreuthmayer, <jungreuc@gmx.at>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2015 by Christian Jungreuthmayer
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.18.2 or,
at your option, any later version of Perl 5 you may have available.
